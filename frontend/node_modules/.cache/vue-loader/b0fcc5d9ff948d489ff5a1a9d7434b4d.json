{"remainingRequest":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/natthaphongngaongam/developments/MsAranhos/frontend/src/views/covid19/CovidPage.vue?vue&type=template&id=5da3fe08&","dependencies":[{"path":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/src/views/covid19/CovidPage.vue","mtime":1639027598000},{"path":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}