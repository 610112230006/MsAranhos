{"remainingRequest":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/natthaphongngaongam/developments/MsAranhos/frontend/src/views/import/ImportStatment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/src/views/import/ImportStatment.vue","mtime":1644292966658},{"path":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natthaphongngaongam/developments/MsAranhos/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ImportStatment.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"ImportStatment.vue","sourceRoot":"src/views/import","sourcesContent":["<template>\n  <b-card-code title=\"เลือกไฟล์ Excel STATMENT จาก สปสช. ที่ต้องการนำเข้า\">\n    <b-card-text>\n      ไฟล์ Excel รูปแบบไฟล์ต้องเป็นแบบเดียวกันกับ สปสช. ทุกประการ\n    </b-card-text>\n    <div>\n      <!-- Styled -->\n      <b-form-file\n        v-model=\"file\"\n        type=\"file\"\n        ref=\"file\"\n        @change=\"handleFileUpload($event)\"\n        placeholder=\"Choose a file or drop it here...\"\n        drop-placeholder=\"Drop file here...\"\n      />\n\n      <!-- <b-card-text class=\"my-1\">\n        ไฟล์ที่เลือก : <strong>{{ file ? file.name : \"\" }}</strong>\n      </b-card-text> -->\n      <!-- <b-button variant=\"primary\" v-b-modal.modal-scrollable>\n        ตกลง\n      </b-button> -->\n      <model-custom></model-custom>\n    </div>\n    <div class=\"\">\n      <validation-observer ref=\"simpleRules\">\n        <b-form>\n          <b-form-checkbox\n            v-model=\"selected\"\n            class=\"custom-control-primary mt-2 mb-1\"\n          >\n            กำหนดแถวเอง\n          </b-form-checkbox>\n          <b-row>\n            <b-col md=\"12\">\n              <b-form-group label=\"เลือก Sheets\">\n                <b-form-select v-model=\"sheet\" :options=\"obSelect\" />\n              </b-form-group>\n            </b-col>\n          </b-row>\n          <b-row v-if=\"selected\">\n            <b-col md=\"6\">\n              <b-form-group label=\"เริ่มจาก\">\n                <validation-provider\n                  #default=\"{ errors }\"\n                  name=\"แถวที่เริ่มบันทึกข้อมูล\"\n                  rules=\"required\"\n                >\n                  <b-form-input\n                    v-model=\"start\"\n                    :state=\"errors.length > 0 ? false : null\"\n                    placeholder=\"แถวที่\"\n                  />\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n            <b-col md=\"6\">\n              <b-form-group label=\"สิ้นสุด\">\n                <validation-provider\n                  #default=\"{ errors }\"\n                  name=\"แถวที่สิ้นสุดการบันทึกข้อมูล\"\n                  rules=\"required\"\n                >\n                  <b-form-input\n                    v-model=\"end\"\n                    :state=\"errors.length > 0 ? false : null\"\n                    placeholder=\"แถวที่\"\n                  />\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n          </b-row>\n          <b-col cols=\"12\">\n            <b-button\n              variant=\"primary\"\n              type=\"submit\"\n              @click.prevent=\"validationForm\"\n            >\n              อัพโหลด\n            </b-button>\n            <b-button\n              class=\"ml-1\"\n              variant=\"secondary\"\n              @click.prevent=\"previewData\"\n            >\n               ดูตัวอย่างข้อมูล\n            </b-button>\n          </b-col>\n        </b-form>\n      </validation-observer>\n    </div>\n    <b-row class=\"mt-2\">\n      <b-col>\n        <b-table responsive :items=\"dataPreview\" class=\"mb-0\">\n        </b-table>\n      </b-col>\n    </b-row>\n  </b-card-code>\n</template>\n\n<script>\nimport {\n  BCardText,\n  BFormFile,\n  BButton,\n  BFormInput,\n  BFormGroup,\n  BForm,\n  BRow,\n  BFormCheckbox,\n  BTable,\n  BCol,\n  BFormSelect,\n} from \"bootstrap-vue\";\nimport XLSX from \"xlsx\";\nimport ModelCustom from \"./component/ModelCustom.vue\";\nimport { ValidationProvider, ValidationObserver } from \"vee-validate\";\nimport { required, email } from \"@validations\";\nimport BCardCode from \"@core/components/b-card-code\";\nimport useJwt from \"@/auth/jwt/useJwt\";\n\nexport default {\n  components: {\n    BCardCode,\n    BCardText,\n    BFormFile,\n    BButton,\n    ModelCustom,\n    BFormCheckbox,\n    BFormInput,\n    BFormGroup,\n    BForm,\n    BTable,\n    BRow,\n    BCol,\n    ValidationProvider,\n    ValidationObserver,\n    BFormSelect,\n  },\n  data() {\n    return {\n      file: null,\n      end: \"0\",\n      start: \"0\",\n      selected: true,\n      dataPreview: [],\n      sheet: \"\",\n      obSelect: [],\n      fields: [\n        \"req\",\n        \"no\",\n        \"TRAN_ID\",\n        \"hn\",\n        \"an\",\n        \"pid\",\n        \"fullname\",\n        \"vsdate\",\n        \"dcdate\",\n        \"MAININSCL\",\n        \"charge\",\n        \"ip_act\",\n        \"ipAdjRW\",\n        \"ip_PS\",\n        \"compe_percent\",\n        \"CCUF\",\n        \"AdjRW\",\n        \"pay_rate\",\n        \"compensate_act_sa\",\n        \"compensate_s\",\n        \"compensate_t\",\n        \"compensate\",\n      ],\n    };\n  },\n  mounted() {},\n  methods: {\n    validationForm() {\n      var dataPreview = [];\n      this.$refs.simpleRules.validate().then((success) => {\n        if (success) {\n          let formData = new FormData();\n          formData.append(\"files\", this.file);\n\n          if (this.file) {\n            this.$swal({\n              title: \"แน่ใจแล้วหรอ ?\",\n              text: \"ข้อมูลของคุณจะถูกเพิ่มลงฐานข้อมูล!\",\n              icon: \"warning\",\n              showCancelButton: true,\n              confirmButtonColor: \"#3085d6\",\n              cancelButtonColor: \"#d33\",\n              confirmButtonText: \"ยืนยัน\",\n              cancelButtonText: \"ยกเลิก\",\n            }).then((result) => {\n              if (result.isConfirmed) {\n                const reader = new FileReader();\n\n                reader.onload = (e) => {\n                  /* Parse data */\n                  const bstr = e.target.result;\n                  const wb = XLSX.read(bstr, { type: \"binary\" });\n                  /* Get first worksheet */\n                  const ws = wb.Sheets[this.sheet];\n                  /* Convert array of arrays */\n                  const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n\n                  if (this.selected) {\n                    data.forEach((element, index) => {\n                      var current = index + 1;\n                      if (\n                        current >= parseInt(this.start) &&\n                        current <= parseInt(this.end)\n                      ) {\n                        dataPreview.push(element);\n                      }\n                    });\n                  } else {\n                    dataPreview = data;\n                  }\n                  // this.dataPreview = dataPreview\n                  console.log(dataPreview);\n\n                  this.$http\n                    .post(\"/api/v1/import/statement\", dataPreview, {\n                      headers: {\n                        Authorization: `Bearer ${useJwt.getToken()}`,\n                      },\n                    })\n                    .then((res) => {\n                      if (res.data.status == 200) {\n                        this.$bvToast.toast(\"import ข้อมูลสำเร็จ\", {\n                          title: \"สำเร็จ\",\n                          variant: \"success\",\n                          solid: true,\n                        });\n                      } else {\n                        this.$bvToast.toast(\"import ข้อมูลไม่สำเร็จ\", {\n                          title: \"ไม่สำเร็จ\",\n                          variant: \"danger\",\n                          solid: true,\n                        });\n                      }\n                    })\n                    .catch((err) => {\n                      console.log(err);\n                    });\n                };\n                reader.readAsBinaryString(this.file);\n              }\n            });\n          } else {\n            this.$bvToast.toast(\"กรุณาเลือกไฟล์\", {\n              title: `ไม่สำเร็จ`,\n              variant: `danger`,\n              solid: true,\n            });\n          }\n        }\n      });\n    },\n    previewData() {\n      var dataPreview = [];\n      this.$refs.simpleRules.validate().then((success) => {\n        if (success) {\n          let formData = new FormData();\n\n          formData.append(\"files\", this.file);\n\n          if (this.file) {\n            const reader = new FileReader();\n\n            reader.onload = (e) => {\n              /* Parse data */\n              const bstr = e.target.result;\n              const wb = XLSX.read(bstr, { type: \"binary\" });\n              /* Get first worksheet */\n              // const wsname = wb.SheetNames[\"รายละเอียด IP\"];\n              // console.log(wsname)\n              const ws = wb.Sheets[this.sheet];\n              /* Convert array of arrays */\n              const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n\n              if (this.selected) {\n                data.forEach((element, index) => {\n                  var current = index + 1;\n                  if (\n                    current >= parseInt(this.start) &&\n                    current <= parseInt(this.end)\n                  ) {\n                    dataPreview.push(element);\n                  }\n                });\n              } else {\n                dataPreview = data;\n              }\n              this.dataPreview = dataPreview;\n              console.log(dataPreview);\n            };\n            reader.readAsBinaryString(this.file);\n          } else {\n            this.$bvToast.toast(\"กรุณาเลือกไฟล์\", {\n              title: `ไม่สำเร็จ`,\n              variant: `danger`,\n              solid: true,\n            });\n          }\n        }\n      });\n    },\n\n    handleFileUpload(event) {\n      this.file = event.target.files[0];\n\n      if (this.file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          /* Parse data */\n          const bstr = e.target.result;\n          const wb = XLSX.read(bstr, { type: \"binary\" });\n          /* Get first worksheet */\n          // const wsname = wb.SheetNames[\"รายละเอียด IP\"];\n          const sheetList = wb.SheetNames; //Array of sheet names.\n          this.obSelect = sheetList;\n          console.log(sheetList);\n          // const ws = wb.Sheets[this.sheet];\n          // const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n        };\n        reader.readAsBinaryString(this.file);\n      }\n    },\n  },\n};\n</script>\n"]}]}